@page "/createuser"
@using System.Net.Http.Json
@using GronOgOlsenFrontEnd.Services
@using System.Text.Json
@using UserService.Models
@inject UserState UserState

<h3>Create User</h3>
<p>Passwords are hashed and encrypted, however, we still discourage using personal passwords for this PoC</p>
<div>
    <label for="APIDomain">API Domain</label>
    <InputText id="APIDomain" @bind-Value="WebManager.GetInstance.ServerUrl" placeholder="API Domain" /><br />
    <label for="APIEndpoint">API Endpoint</label>
    <InputText id="APIEndpoint" @bind-Value="apiEndpoint" placeholder="API Endpoint" /><br />
    <label for="CombinedAPI">API Domain</label>
    <input id="CombinedAPI" type="text" value="@(WebManager.GetInstance.ServerUrl + "/" + apiEndpoint)" readonly />
    <br /><br />
    <InputText @bind-Value="firstName" placeholder="First Name" />
    <InputText @bind-Value="lastName" placeholder="Last Name" />
    <InputText @bind-Value="email" placeholder="Email" />
    <InputText @bind-Value="username" placeholder="Username" />
    <InputText @bind-Value="password" placeholder="Password" type="password" />
    <InputText @bind-Value="address" placeholder="Address" />
    <InputText @bind-Value="phoneNumber" placeholder="Phone Number" />
    <button @onclick="CreateUser">Create User</button>
    <textarea class="json-textarea" value="@FormattedResult" readonly />
</div>

@code {
    private string apiEndpoint = "user/create";
    private string userId, firstName, lastName, email, username, password, address, phoneNumber;
    private bool verified;
    private string Result;
    private string FormattedResult
    {
        get
        {
            if (string.IsNullOrEmpty(Result))
                return string.Empty;

            try
            {
                var jsonObject = System.Text.Json.JsonSerializer.Deserialize<object>(Result);
                return System.Text.Json.JsonSerializer.Serialize(jsonObject, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
            }
            catch (Exception)
            {
                return Result;
            }
        }
    }
    private async Task CreateUser()
    {
        var user = new
        {
            Id = userId,
            FirstName = firstName,
            LastName = lastName,
            Email = email,
            Username = username,
            Password = password,
            Address = address,
            PhoneNumber = phoneNumber,
            Verified = verified
        };

        var response = await WebManager.GetInstance.HttpClient.PostAsJsonAsync($"{WebManager.GetInstance.ServerUrl}/{apiEndpoint}", user);
        if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Result = "401 Unauthorized";
            return;
        }

        Result = await response.Content.ReadAsStringAsync();

        try
        {
            var options = new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                    PropertyNameCaseInsensitive = true
                };

            UserState.User = JsonSerializer.Deserialize<UserModelDTO>(Result, options);
            if (UserState.User != null)
            {
                Console.WriteLine("User successfully deserialized.");
            }
            else
            {
                Console.WriteLine("User deserialized to null.");
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine("User failed to serialize to UserModelDTO" + ex.Message);
        }
    }
    protected override void OnInitialized()
    {
        UserState.UserChanged += OnUserChanged;
    }

    private void OnUserChanged()
    {
        // You can trigger StateHasChanged directly or perform other logic
        StateHasChanged();
    }

    public void Dispose()
    {
        UserState.UserChanged -= OnUserChanged;
    }
}