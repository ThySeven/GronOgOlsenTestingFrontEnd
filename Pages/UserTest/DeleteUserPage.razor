@page "/deleteuser"
@using GronOgOlsenFrontEnd.Services
@inject UserState UserState


<h3>Delete User</h3>

<div>
    <label for="APIDomain">API Domain</label>
    <InputText id="APIDomain" @bind-Value="WebManager.GetInstance.ServerUrl" placeholder="API Domain" /><br />
    <label for="APIEndpoint">API Endpoint</label>
    <InputText id="APIEndpoint" @bind-Value="apiEndpoint" placeholder="API Endpoint" /><br />
    <label for="CombinedAPI">API Domain</label>
    <input id="CombinedAPI" type="text" value="@(WebManager.GetInstance.ServerUrl + "/" + apiEndpoint)" readonly />
    <br /><br />
    <InputText @bind-Value="userId" placeholder="User Id" />
    <button @onclick="DeleteUser">Delete User</button>
    <textarea class="json-textarea" value="@FormattedResult" readonly />
</div>

@code {
    private string apiEndpoint = "user/delete";
    private string userId, Result;
    private string FormattedResult
    {
        get
        {
            if (string.IsNullOrEmpty(Result))
                return string.Empty;

            try
            {
                var jsonObject = System.Text.Json.JsonSerializer.Deserialize<object>(Result);
                return System.Text.Json.JsonSerializer.Serialize(jsonObject, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
            }
            catch (Exception)
            {
                return Result;
            }
        }
    }
    private async Task DeleteUser()
    {
        try
        {
            var response = await WebManager.GetInstance.HttpClient.DeleteAsync($"{WebManager.GetInstance.ServerUrl}/{apiEndpoint}/{userId}");
            if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Result = "401 Unauthorized";
                return;
            }

            Result = await response.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            Result = ex.Message;
        }
    }
    protected override void OnInitialized()
    {
        UserState.UserChanged += OnUserChanged;
    }

    private void OnUserChanged()
    {
        // You can trigger StateHasChanged directly or perform other logic
        userId = UserState.User.Id;
        StateHasChanged();
    }

    public void Dispose()
    {
        UserState.UserChanged -= OnUserChanged;
    }
}