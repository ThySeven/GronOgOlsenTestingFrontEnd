@page "/updateuser"
@using System.Net.Http.Json
@using GronOgOlsenFrontEnd.Services
@using System.Net.Http.Headers
@using System.Text.Json
@using UserService.Models
@inject UserState UserState


<h3>Update User</h3>

<div>
    <label for="APIDomain">API Domain</label>
    <InputText id="APIDomain" @bind-Value="WebManager.GetInstance.ServerUrl" placeholder="API Domain" /><br />
    <label for="APIEndpoint">API Endpoint</label>
    <InputText id="APIEndpoint" @bind-Value="apiEndpoint" placeholder="API Endpoint" /><br />
    <label for="CombinedAPI">API Domain</label>
    <input id="CombinedAPI" type="text" value="@(WebManager.GetInstance.ServerUrl + "/" + apiEndpoint)" readonly />
    <br /><br />
    <InputText @bind-Value="userId" placeholder="Id" />
    <InputText @bind-Value="firstName" placeholder="First Name" />
    <InputText @bind-Value="lastName" placeholder="Last Name" />
    <InputText @bind-Value="email" placeholder="Email" />
    <InputText @bind-Value="username" placeholder="Username" />
    <InputText @bind-Value="address" placeholder="Address" />
    <InputText @bind-Value="phoneNumber" placeholder="Phone Number" />
    <button @onclick="UpdateUser">Update User</button>
    @if (!string.IsNullOrEmpty(jwtToken))
    {
        <p>JWT Token has been initialized, you dont have to save it manually</p>
    }
    <textarea class="json-textarea" value="@FormattedResult" readonly />
</div>

@code {


    private string apiEndpoint = "user/update";
    private string userId, username, firstName, lastName, email, address, phoneNumber, Result, jwtToken;
    private string FormattedResult
    {
        get
        {
            if (string.IsNullOrEmpty(Result))
                return string.Empty;

            try
            {
                var jsonObject = System.Text.Json.JsonSerializer.Deserialize<object>(Result);
                return System.Text.Json.JsonSerializer.Serialize(jsonObject, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
            }
            catch (Exception)
            {
                return Result;
            }
        }
    }
    private async Task UpdateUser()
    {
        try
        {
            var user = new
            {
                Id = userId,
                Username = username,
                FirstName = firstName,
                LastName = lastName,
                Email = email,
                Address = address,
                PhoneNumber = phoneNumber
            };

            var response = await WebManager.GetInstance.HttpClient.PutAsJsonAsync($"{WebManager.GetInstance.ServerUrl}/{apiEndpoint}", user);
            if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Result = "401 Unauthorized";
                return;
            }

            var responseBody = await response.Content.ReadAsStringAsync();

            var options = new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                    PropertyNameCaseInsensitive = true
                };
            UserModelDTO updatedUser = JsonSerializer.Deserialize<UserModelDTO>(responseBody, options);

            if (!string.IsNullOrEmpty(updatedUser?.AuthToken))
            {
                // Set the Bearer token for authorization on subsequent requests
                WebManager.GetInstance.HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", updatedUser.AuthToken);
                jwtToken = updatedUser.AuthToken;
                WebManager.GetInstance.jwtToken = updatedUser.AuthToken;
                Console.WriteLine("Token set successfully.");
                // Now you can make other authenticated requests using the token.
            }
            else
            {
                Console.WriteLine("Error: Token not found in the response.");
            }
            UserState.User = updatedUser;
            Result = await response.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            Result = ex.Message;
        }
    }

    private static string ExtractToken(string responseBody)
    {
        // Assuming the response is in format: "{ token = ... }"
        const string tokenKey = "token = ";
        int tokenStartIndex = responseBody.IndexOf(tokenKey) + tokenKey.Length;

        if (tokenStartIndex >= tokenKey.Length)
        {
            int tokenEndIndex = responseBody.IndexOf(" }", tokenStartIndex);
            if (tokenEndIndex > tokenStartIndex)
            {
                return responseBody.Substring(tokenStartIndex, tokenEndIndex - tokenStartIndex);
            }
            else
            {
                // Handle case with no closing space brace
                return responseBody.Substring(tokenStartIndex);
            }
        }

        return null;
    }

    protected override void OnInitialized()
    {
        UserState.UserChanged += OnUserChanged;
        if (UserState.User != null)
        {
        userId = UserState.User.Id;
        firstName = UserState.User.FirstName;
        lastName = UserState.User.LastName;
        email = UserState.User.Email;
        username = UserState.User.Username;
        address = UserState.User.Address;
        phoneNumber = UserState.User.PhoneNumber;        }
    }

    private void OnUserChanged()
    {
        // You can trigger StateHasChanged directly or perform other logic
        userId = UserState.User.Id;
        firstName = UserState.User.FirstName;
        lastName = UserState.User.LastName;
        email = UserState.User.Email;
        username = UserState.User.Username;
        address = UserState.User.Address;
        phoneNumber = UserState.User.PhoneNumber;
        StateHasChanged();
    }

    public void Dispose()
    {
        UserState.UserChanged -= OnUserChanged;
    }
}