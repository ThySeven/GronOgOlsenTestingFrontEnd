@page "/create-payment-link"
@using System.Net.Http.Json
@using GronOgOlsenFrontEnd.Models
@using GronOgOlsenFrontEnd.Services
@using System.Text.Json
@inject InvoiceState InvoiceState


<h3>Create Payment Link</h3>
<div>
    <label for="apiDomain">API Domain</label>
    <InputText id="apiDomain" @bind-Value="WebManager.GetInstance.ServerUrl" placeholder="API Domain" /><br />
    <label for="apiEndpoint">API Endpoint</label>
    <InputText id="apiEndpoint" @bind-Value="apiEndpoint" placeholder="API Endpoint" /><br />
    <label for="combinedAPI">Combined API</label>
    <input id="combinedAPI" type="text" value="@(WebManager.GetInstance.ServerUrl + "/" + apiEndpoint)" readonly />
    <br /><br />
    <div>
        <label for="price">Price</label>
        <InputNumber id="price" @bind-Value="price" placeholder="Price" />
    </div>
    <div>
        <label for="currencyCode">Currency Code</label>
        <InputText id="currencyCode" @bind-Value="currencyCode" placeholder="Currency Code" />
    </div>
    <div>
        <label for="invoiceNumber">Invoice Number</label>
        <InputText id="invoiceNumber" @bind-Value="invoiceNumber" placeholder="Invoice Number" />
    </div>
    <div>
        <label for="reference">Reference</label>
        <InputText id="reference" @bind-Value="reference" placeholder="Reference" />
    </div>
    <div>
        <label for="invoiceDate">Invoice Date</label>
        <input type="datetime-local" id="invoiceDate" @bind-value="invoiceDate" placeholder="Invoice Date" />
    </div>
    <div>
        <label for="note">Note</label>
        <InputTextArea id="note" @bind-Value="note" placeholder="Note" />
    </div>
    <div>
        <label for="term">Term</label>
        <InputText id="term" @bind-Value="term" placeholder="Term" />
    </div>
    <div>
        <label for="memo">Memo</label>
        <InputText id="memo" @bind-Value="memo" placeholder="Memo" />
    </div>
    <div>
        <button @onclick="CreatePaymentLink">Create Payment Link</button>
    </div>
    <div>
        <label for="formattedResult">Formatted Result</label>
        <textarea id="formattedResult" class="json-textarea" value="@FormattedResult" readonly />
    </div>
</div>

@code {
    private string apiEndpoint = "invoice/createpaymentlink";
    private int price; 
    private string currencyCode, invoiceNumber, reference, note, term, memo;
    private DateTime invoiceDate;
    private string Result;
    private string FormattedResult
    {
        get
        {
            if (string.IsNullOrEmpty(Result))
                return string.Empty;

            try
            {
                var jsonObject = System.Text.Json.JsonSerializer.Deserialize<object>(Result);
                return System.Text.Json.JsonSerializer.Serialize(jsonObject, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
            }
            catch (Exception)
            {
                return Result;
            }
        }
    }

    private async Task CreatePaymentLink()
    {
        try
        {
            PaymentModel paymentLink = new()
                {
                    Price = price,
                    CurrencyCode = currencyCode,
                    InvoiceNumber = invoiceNumber,
                    Reference = reference,
                    InvoiceDate = invoiceDate,
                    Note = note,
                    Term = term,
                    Memo = memo
                };

            var response = await WebManager.GetInstance.HttpClient.PostAsJsonAsync($"{WebManager.GetInstance.ServerUrl}/{apiEndpoint}", paymentLink);
            if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Result = "401 Unauthorized";
                return;
            }

            Result = await response.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            Result = ex.Message;
        }
    }
    protected override void OnInitialized()
    {
        InvoiceState.InvoiceChanged += OnInvoiceChanged;
    }

    private void OnInvoiceChanged()
    {
        // You can trigger StateHasChanged directly or perform other logic
        price = Convert.ToInt32(Math.Floor(InvoiceState.Invoice.Price));
        invoiceNumber = InvoiceState.Invoice.Id;
        reference = InvoiceState.Invoice.Id;
        invoiceDate = InvoiceState.Invoice.CreatedAt;

        StateHasChanged();
    }

    public void Dispose()
    {
        InvoiceState.InvoiceChanged -= OnInvoiceChanged;
    }
}