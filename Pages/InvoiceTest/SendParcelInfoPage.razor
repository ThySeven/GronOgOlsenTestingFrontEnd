@page "/send-parcel-info"
@using System.Net.Http.Json
@using GronOgOlsenFrontEnd.Models
@using GronOgOlsenFrontEnd.Services
@using System.Text.Json
@inject InvoiceState InvoiceState

<h3>Send Parcel Information</h3>
<div>
    <label for="apiDomain">API Domain</label>
    <InputText id="apiDomain" @bind-Value="WebManager.GetInstance.ServerUrl" placeholder="API Domain" /><br />
    <label for="apiEndpoint">API Endpoint</label>
    <InputText id="apiEndpoint" @bind-Value="apiEndpoint" placeholder="API Endpoint" /><br />
    <label for="combinedAPI">Combined API</label>
    <input id="combinedAPI" type="text" value="@(WebManager.GetInstance.ServerUrl + "/" + apiEndpoint)" readonly />
    <br /><br />
    <div>
        <label for="weight">Weight</label>
        <InputNumber id="weight" @bind-Value="weight" placeholder="Weight" />
    </div>
    <div>
        <label for="reference">Reference No</label>
        <InputText id="reference" @bind-Value="reference" placeholder="Reference No" />
    </div>
    <div>
        <label for="comment">Comment</label>
        <InputText id="comment" @bind-Value="comment" placeholder="Comment" />
    </div>
    <div>
        <label for="cashService">Cash Service</label>
        <InputNumber id="cashService" @bind-Value="cashService" placeholder="Cash Service" />
    </div>
    <div>
        <label for="addOnLiabilityService">Add-On Liability Service</label>
        <InputNumber id="addOnLiabilityService" @bind-Value="addOnLiabilityService" placeholder="Add-On Liability Service" />
    </div>
    <div>
        <label for="weightCategory">Weight Category</label>
        <InputText id="weightCategory" @bind-Value="weightCategory" placeholder="Weight Category" />
    </div>
    <div>
        <label for="height">Height</label>
        <InputNumber id="height" @bind-Value="height" placeholder="Height" />
    </div>
    <div>
        <label for="width">Width</label>
        <InputNumber id="width" @bind-Value="width" placeholder="Width" />
    </div>
    <div>
        <label for="length">Length</label>
        <InputNumber id="length" @bind-Value="length" placeholder="Length" />
    </div>
    <div>
        <button @onclick="SendParcelInfo">Send Parcel Info</button>
    </div>
    <div>
        <label for="formattedResult">Formatted Result</label>
        <textarea id="formattedResult" class="json-textarea" value="@FormattedResult" readonly />
    </div>
</div>

@code {
    private string apiEndpoint = "invoice/createParcelInfo";
    private double weight, cashService, addOnLiabilityService, height, width, length;
    private string reference, comment, weightCategory;
    private string Result;
    private string FormattedResult
    {
        get
        {
            if (string.IsNullOrEmpty(Result))
                return string.Empty;

            try
            {
                var jsonObject = System.Text.Json.JsonSerializer.Deserialize<object>(Result);
                return System.Text.Json.JsonSerializer.Serialize(jsonObject, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
            }
            catch (Exception)
            {
                return Result;
            }
        }
    }

    private async Task SendParcelInfo()
    {
        var parcelInfo = new
        {
            Weight = weight,
            Reference = reference,
            Comment = comment,
            CashService = cashService,
            AddOnLiabilityService = addOnLiabilityService,
            WeightCategory = weightCategory,
            Height = height,
            Width = width,
            Length = length
        };

        var response = await WebManager.GetInstance.HttpClient.PostAsJsonAsync($"{WebManager.GetInstance.ServerUrl}/{apiEndpoint}", parcelInfo);
        if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Result = "401 Unauthorized";
            return;
        }

        Result = await response.Content.ReadAsStringAsync();
    }
    protected override void OnInitialized()
    {
        InvoiceState.InvoiceChanged += OnInvoiceChanged;
    }

    private void OnInvoiceChanged()
    {
        // You can trigger StateHasChanged directly or perform other logic
        reference = InvoiceState.Invoice.Id;
        StateHasChanged();
    }

    public void Dispose()
    {
        InvoiceState.InvoiceChanged -= OnInvoiceChanged;
    }
}