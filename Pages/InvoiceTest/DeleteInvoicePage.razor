@page "/delete-invoice"
@using System.Net.Http.Json
@using GronOgOlsenFrontEnd.Models
@using GronOgOlsenFrontEnd.Services
@using System.Text.Json
@inject InvoiceState InvoiceState

<h3>Delete Invoice</h3>
<div>
    <label for="apiDomain">API Domain</label>
    <InputText id="apiDomain" @bind-Value="WebManager.GetInstance.ServerUrl" placeholder="API Domain" /><br />
    <label for="apiEndpoint">API Endpoint</label>
    <InputText id="apiEndpoint" @bind-Value="apiEndpoint" placeholder="API Endpoint" /><br />
    <label for="combinedAPI">Combined API</label>
    <input id="combinedAPI" type="text" value="@(WebManager.GetInstance.ServerUrl + "/" + apiEndpoint)" readonly />
    <br /><br />
    <label for="invoiceId">Invoice ID</label>
    <InputText id="invoiceId" @bind-Value="invoiceId" placeholder="Invoice ID" /><br />
    <div>
        <button @onclick="DeleteInvoice">Delete Invoice</button>
    </div>
    <div>
        <label for="formattedResult">Formatted Result</label>
        <textarea id="formattedResult" class="json-textarea" value="@FormattedResult" readonly />
    </div>
</div>

@code {
    private string apiEndpoint = "invoice/delete";
    private string invoiceId;
    private string Result;
    private string FormattedResult
    {
        get
        {
            if (string.IsNullOrEmpty(Result))
                return string.Empty;

            try
            {
                var jsonObject = System.Text.Json.JsonSerializer.Deserialize<object>(Result);
                return System.Text.Json.JsonSerializer.Serialize(jsonObject, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
            }
            catch (Exception)
            {
                return Result;
            }
        }
    }

    private async Task DeleteInvoice()
    {
        try
        {
            var response = await WebManager.GetInstance.HttpClient.DeleteAsync($"{WebManager.GetInstance.ServerUrl}/{apiEndpoint}/{invoiceId}");
            if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Result = "401 Unauthorized";
                return;
            }

            Result = await response.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            Result = ex.Message;
        }
    }
    protected override void OnInitialized()
    {
        InvoiceState.InvoiceChanged += OnInvoiceChanged;
    }

    private void OnInvoiceChanged()
    {
        // You can trigger StateHasChanged directly or perform other logic
        invoiceId = InvoiceState.Invoice.Id;
        StateHasChanged();
    }

    public void Dispose()
    {
        InvoiceState.InvoiceChanged -= OnInvoiceChanged;
    }
}