@page "/create-lot"
@using System.Net.Http.Json
@using GronOgOlsenFrontEnd.Models
@using GronOgOlsenFrontEnd.Services
@using System.Text.Json
@inject LotState LotState

<h3>Create Lot</h3>
<div>
    <label for="APIDomain">API Domain</label>
    <InputText id="APIDomain" @bind-Value="WebManager.GetInstance.ServerUrl" placeholder="API Domain" /><br />
    <label for="APIEndpoint">API Endpoint</label>
    <InputText id="APIEndpoint" @bind-Value="apiEndpoint" placeholder="API Endpoint" /><br />
    <label for="CombinedAPI">API Domain</label>
    <input id="CombinedAPI" type="text" value="@(WebManager.GetInstance.ServerUrl + "/" + apiEndpoint)" readonly />
    <br /><br />
    <div>
        <label for="lotName">Lot Name</label>
        <InputText id="lotName" @bind-Value="lotName" placeholder="Lot Name" />
    </div>
    <div>
        <label for="location">Location</label>
        <InputText id="location" @bind-Value="location" placeholder="Location" />
    </div>
    <div>
        <label for="onlineAuction">Online Auction</label>
        <InputCheckbox id="onlineAuction" @bind-Value="onlineAuction" />
    </div>
    <div>
        <label for="startingPrice">Starting Price</label>
        <InputNumber id="startingPrice" @bind-Value="startingPrice" placeholder="Starting Price" />
    </div>
    <div>
        <label for="minimumBid">Minimum Bid</label>
        <InputNumber id="minimumBid" @bind-Value="minimumBid" placeholder="Minimum Bid" />
    </div>
    <div>
        <label for="lotEndTime">Lot End Time</label>
        <input type="datetime" id="lotEndTime" @bind-value="lotEndTime" placeholder="Lot End Time" />
    </div>
    <div>
        <button @onclick="CreateLot">Create Lot</button>
    </div>
    <div>
        <label for="formattedResult">Formatted Result</label>
        <textarea id="formattedResult" class="json-textarea" value="@FormattedResult" readonly />
    </div>
</div>

@code {
    private string apiEndpoint = "lot";
    private string lotId, lotName, location;
    private DateTime lotCreationTime = DateTime.Now, lotEndTime = DateTime.Now.AddDays(7);
    private bool onlineAuction, open;
    private int startingPrice, minimumBid;
    private string Result;
    private string FormattedResult
    {
        get
        {
            if (string.IsNullOrEmpty(Result))
                return string.Empty;

            try
            {
                var jsonObject = System.Text.Json.JsonSerializer.Deserialize<object>(Result);
                return System.Text.Json.JsonSerializer.Serialize(jsonObject, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
            }
            catch (Exception)
            {
                return Result;
            }
        }
    }

    private async Task CreateLot()
    {
        LotModel lot = new()
        {
            LotId = Guid.NewGuid().ToString(),
            LotName = lotName,
            Location = location,
            OnlineAuction = onlineAuction,
            StartingPrice = startingPrice,
            MinimumBid = minimumBid,
            LotCreationTime = lotCreationTime,
            LotEndTime = lotEndTime
        };

        var response = await WebManager.GetInstance.HttpClient.PostAsJsonAsync($"{WebManager.GetInstance.ServerUrl}/{apiEndpoint}", lot);
        if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Result = "401 Unauthorized";
            return;
        }

        Result = await response.Content.ReadAsStringAsync();
        try
        {
            var options = new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                    PropertyNameCaseInsensitive = true
                };

            LotState.Lot = JsonSerializer.Deserialize<LotModel>(Result, options);
            if (LotState.Lot != null)
            {
                Console.WriteLine("Lot successfully deserialized.");
            }
            else
            {
                Console.WriteLine("Lot deserialized to null.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Lot failed to serialize to UserModel" + ex.Message);
        }
        
    }
    protected override void OnInitialized()
    {
        LotState.LotChanged += OnLotChanged;
    }

    private void OnLotChanged()
    {
        // You can trigger StateHasChanged directly or perform other logic
        lotId = LotState.Lot.LotId;
        lotName = LotState.Lot.LotName;
        location = LotState.Lot.Location;
        onlineAuction = LotState.Lot.OnlineAuction;
        startingPrice = LotState.Lot.StartingPrice;
        minimumBid = LotState.Lot.MinimumBid;
        lotCreationTime = LotState.Lot.LotCreationTime;
        lotEndTime = LotState.Lot.LotEndTime;
        open = LotState.Lot.Open;
        StateHasChanged();
    }

    public void Dispose()
    {
        LotState.LotChanged -= OnLotChanged;
    }

}