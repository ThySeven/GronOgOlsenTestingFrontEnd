@page "/close-lot"
@using System.Net.Http.Json
@using GronOgOlsenFrontEnd.Services
@using System.Text.Json
@inject LotState LotState


<h3>Close Lot</h3>
<div>
    <div>
        <label for="APIDomain">API Domain</label>
        <InputText id="APIDomain" @bind-Value="WebManager.GetInstance.ServerUrl" placeholder="API Domain" />
    </div>
    <div>
        <label for="APIEndpoint">API Endpoint</label>
        <InputText id="APIEndpoint" @bind-Value="apiEndpoint" placeholder="API Endpoint" />
    </div>
    <div>
        <label for="CombinedAPI">Combined API</label>
        <input id="CombinedAPI" type="text" value="@(WebManager.GetInstance.ServerUrl + "/" + apiEndpoint)" readonly />
    </div>
    <div>
        <label for="lotId">Lot ID</label>
        <InputText id="lotId" @bind-Value="lotId" placeholder="Lot ID" />
    </div>
    <div>
        <button @onclick="CloseLot">Close Lot</button>
    </div>
    <div>
        <label for="formattedResult">Formatted Result</label>
        <textarea id="formattedResult" class="json-textarea" value="@FormattedResult" readonly></textarea>
    </div>
</div>

@code {
    private string apiEndpoint = "lot/close";
    private string lotId;
    private string Result;
    private string FormattedResult
    {
        get
        {
            if (string.IsNullOrEmpty(Result))
                return string.Empty;

            try
            {
                var jsonObject = System.Text.Json.JsonSerializer.Deserialize<object>(Result);
                return System.Text.Json.JsonSerializer.Serialize(jsonObject, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
            }
            catch (Exception)
            {
                return Result;
            }
        }
    }

    private async Task CloseLot()
    {
        var response = await WebManager.GetInstance.HttpClient.PutAsJsonAsync($"{WebManager.GetInstance.ServerUrl}/{apiEndpoint}", lotId);
        if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Result = "401 Unauthorized";
            return;
        }

        Result = await response.Content.ReadAsStringAsync();
    }
    protected override void OnInitialized()
    {
        LotState.LotChanged += OnLotChanged;
    }

    private void OnLotChanged()
    {
        // You can trigger StateHasChanged directly or perform other logic
        lotId = LotState.Lot.LotId;

        StateHasChanged();
    }

    public void Dispose()
    {
        LotState.LotChanged -= OnLotChanged;
    }
}